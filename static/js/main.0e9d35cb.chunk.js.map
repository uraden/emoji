{"version":3,"sources":["components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","useState","search","setSearch","setData","isShowingAlert","setShowingAlert","useEffect","newData","Emoji","filter","emoji","title","toLowerCase","includes","toLocaleLowerCase","new_res","slice","map","ser","symbol","className","type","value","onChange","e","target","placeholder","onTransitionEnd","val","onClick","navigator","clipboard","writeText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sqsKAmEeA,MA3Df,WAAmB,IAAD,EACcC,mBAAS,IADvB,mBACPC,EADO,KACCC,EADD,OAEUF,mBAAS,IAFnB,mBAEDG,GAFC,aAG4BH,oBAAS,GAHrC,mBAGPI,EAHO,KAGSC,EAHT,KAKdC,qBAAU,WACN,IAAMC,EAAUC,EAAMC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,cAAcC,SAASZ,EAAOa,wBAChFX,EAAQI,KACT,CAACN,IAKJ,IAAMc,EAAUP,EAAMQ,MAAM,EAAG,IAAIC,KAAI,SAAAC,GACnC,OAAQA,EAAIC,UAKhB,OACI,gCACI,sBAAKC,UAAU,MAAf,UACI,4DACA,kFACA,uBAAOC,KAAK,OAAOD,UAAU,SAASE,MAAOrB,EAAQsB,SAAU,SAACC,GAAD,OAAOtB,EAAUsB,EAAEC,OAAOH,QAAQI,YAAY,6BAC7G,qBAAKN,UAAS,8BAAyBhB,EAAiB,cAAgB,gBAChDuB,gBAAiB,kBAAMtB,GAAgB,IAD/D,yBAGJ,qBAAKe,UAAU,YAAf,SACKZ,EAAMC,QAAO,SAACmB,GACX,MAAe,KAAX3B,EACQc,EACDa,EAAIjB,MAAMC,cAAcC,SAASZ,EAAOW,eACxCgB,OADJ,KAIRX,KAAI,SAACW,GACJ,OAEI,qBAAKR,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,SACI,qBAAKA,UAAU,OAAuBS,QAAS,WAAQC,UAAUC,UAAUC,UAAUJ,EAAIT,QAASd,GAAgB,IAAlH,SACI,uBAAMe,UAAU,aAAhB,eAAgCQ,EAAIT,OAApC,QADuBS,EAAIjB,oBCrChDsB,MATf,WACE,OACE,qBAAKb,UAAU,MAAf,SAEE,cAAC,EAAD,OCKSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e9d35cb.chunk.js","sourcesContent":["import './Header.css'\nimport React, { useState, useEffect } from 'react'\nimport Emoji from './Emoji.json'\nimport Body from './Body'\n\n\n\n\nfunction Header() {\n    const [search, setSearch] = useState('')\n    const [data, setData] = useState([])\n    const [isShowingAlert, setShowingAlert] = useState(false)\n\n    useEffect(() => {\n        const newData = Emoji.filter(emoji => emoji.title.toLowerCase().includes(search.toLocaleLowerCase()))\n        setData(newData)\n    }, [search])\n\n\n\n\n    const new_res = Emoji.slice(0, 30).map(ser => {\n        return (ser.symbol)\n    })\n\n\n\n    return (\n        <div>\n            <div className=\"top\">\n                <h1> Emoji Search ðŸ¦„</h1>\n                <p> A simple emoji search tool made with ReactJS.   </p>\n                <input type='text' className='search' value={search} onChange={(e) => setSearch(e.target.value)} placeholder=\"Search for the emoji ...\" />\n                <div className={`alert alert-success ${isShowingAlert ? 'alert-shown' : 'alert-hidden'}`}\n                                        onTransitionEnd={() => setShowingAlert(false)}> Copied!</div>\n            </div>\n            <div className=\"container\">\n                {Emoji.filter((val) => {\n                    if (search === '') {\n                        return (new_res)\n                    } else if (val.title.toLowerCase().includes(search.toLowerCase())) {\n                        return val\n                    }\n\n                }).map((val) => {\n                    return (\n\n                        <div className=\"container\">\n                            <div className=\"results\">\n                                <div className=\"item\" key={val.title} onClick={() => { navigator.clipboard.writeText(val.symbol); setShowingAlert(true) }}>\n                                    <span className=\"item-emoji\">  {val.symbol} </span>\n                    \n                                </div>\n                            </div>\n                        </div>\n\n                    )\n                })\n\n\n                }\n            </div>\n\n        </div>\n    )\n}\n\nexport default Header","\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}